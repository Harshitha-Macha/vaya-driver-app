import connectMongo from '../connectMongo';
import { User, IUser } from '../models/User';
import { Ride, IRide } from '../models/Ride';
import { Location } from '../models/Location';
import { LocationData, Zone, TelegramUpdate } from './types';

export class TelegramBot {
    private readonly token: string;
    private readonly apiUrl: string;

    constructor(token: string) {
        this.token = token;
        this.apiUrl = `https://api.telegram.org/bot${token}`;
    }

    async sendMessage(chatId: number, text: string, keyboard?: any) {
        const response = await fetch(`${this.apiUrl}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: chatId,
                text,
                reply_markup: keyboard
            })
        });
        if (!response.ok) {
            console.error('Error sending message:', await response.text());
            throw new Error('Failed to send message');
        }
        return response.json();
    }

    async sendLanguageSelection(chatId: number) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'English', callback_data: 'en' }],
                [{ text: '‡§π‡§ø‡§Ç‡§¶‡•Ä', callback_data: 'hi' }],
                [{ text: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', callback_data: 'te' }]
            ]
        };
        return this.sendMessage(chatId, 'Select Language:', keyboard);
    }

    async handleRegistration(chatId: number, langCode: string): Promise<IUser> {
        try {
            await connectMongo();
            const user = await User.create({
                telegramId: chatId.toString(),
                preferredLanguage: langCode,
                role: 'USER'
            });

            const messages = {
                en: 'Welcome to Vaya! You have been successfully registered.',
                hi: '‡§µ‡§æ‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ü‡§™‡§ï‡§æ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§´‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§',
                te: '‡∞µ‡∞æ‡∞Ø‡∞æ‡∞ï‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç! ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞∞‡±Å.'
            };

            await this.sendMessage(chatId, messages[langCode as keyof typeof messages]);
            await this.sendWelcomeBack(chatId, langCode);
            return user;
        } catch (error) {
            console.error('Registration error:', error);
            throw error;
        }
    }

    async answerCallbackQuery(callbackQueryId: string, text?: string) {
        const response = await fetch(`${this.apiUrl}/answerCallbackQuery`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                callback_query_id: callbackQueryId,
                text
            })
        });
        return response.json();
    }

    async handleMessage(chatId: number, text: string, language: string) {
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user) return;

        const textToCommandMap: Record<string, string> = {
            'üöó Book Ride': '/book',
            '‚öôÔ∏è Settings': '/settings',
            '‚ùì Help': '/help',
            'üö¶ Go Online': '/status',
            'üî¥ Go Offline': '/status',
            'üìç Update Zone': '/zone',
            'üìä My Stats': '/stats'
        };

        const command = text.startsWith('/') ? text.split(' ')[0] : text;
        
        const actualCommand = textToCommandMap[command] || command;
        
        if (actualCommand === '/cancel') {
            if (user.awaitingPickupAddress) {
                await User.findOneAndUpdate(
                    { telegramId: chatId.toString() },
                    { awaitingPickupAddress: false }
                );
                const messages = {
                    en: 'Booking cancelled. What would you like to do?',
                    hi: '‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?',
                    te: '‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å?'
                };
                return this.sendMessage(chatId, messages[language as keyof typeof messages]);
            }
            return this.sendDefaultResponse(chatId, language);
        }


        if (user.awaitingPickupAddress) {
            if (actualCommand.startsWith('/')) {
                const messages = {
                    en: 'Please enter your pickup address or use /cancel to cancel booking',
                    hi: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡§ø‡§ï‡§Ö‡§™ ‡§™‡§§‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /cancel ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç',
                    te: '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡∞ø‡∞ï‡∞™‡±ç ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø /cancel ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø'
                };
                return this.sendMessage(chatId, messages[language as keyof typeof messages]);
            }
            return this.handlePickupAddress(chatId, text, language);
        }

        const commands: Record<string, () => Promise<any>> = {
            '/help': () => this.sendHelp(chatId, language),
            '/settings': () => this.sendSettings(chatId, language),
            '/book': () => this.startBookingFlow(chatId, language),
            '/status': () => this.toggleDriverStatus(chatId, language),
            '/zone': () => this.updateDriverZone(chatId, language),
            '/stats': () => this.showDriverStats(chatId, language)
        };

        if (actualCommand in commands) {
            return commands[actualCommand]();
        }

        return this.sendDefaultResponse(chatId, language);
    }

    async sendWelcomeBack(chatId: number, language: string) {
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user) return;

        const messages = {
            en: user.role === 'DRIVER' ? 
                'Welcome back driver! What would you like to do?' :
                'Welcome back! What would you like to do?',
            hi: user.role === 'DRIVER' ? 
                '‡§µ‡§æ‡§™‡§∏ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞! ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?' :
                '‡§µ‡§æ‡§™‡§∏ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?',
            te: user.role === 'DRIVER' ? 
                '‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç ‡∞°‡±ç‡∞∞‡±à‡∞µ‡∞∞‡±ç! ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å?' :
                '‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç! ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å?'
        };

        const keyboard = user.role === 'DRIVER' ? {
            keyboard: [
                ['üö¶ Go Online', 'üî¥ Go Offline'],
                ['üìç Update Zone', 'üìä My Stats'],
                ['‚öôÔ∏è Settings']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            selective: true
        } : {
            keyboard: [
                ['üöó Book Ride', '‚öôÔ∏è Settings'],
                ['‚ùì Help']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            selective: true
        };

        return this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
    }

    private async sendHelp(chatId: number, language: string) {
        const messages = {
            en: 'Available commands:\n/book - Book a ride\n/settings - Settings\n/help - Show this message',
            hi: '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ï‡§Æ‡§æ‡§Ç‡§°:\n/book - ‡§∞‡§æ‡§á‡§° ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç\n/settings - ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏\n/help - ‡§Ø‡§π ‡§∏‡§Ç‡§¶‡•á‡§∂',
            te: '‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® ‡∞Ü‡∞¶‡±á‡∞∂‡∞æ‡∞≤‡±Å:\n/book - ‡∞∞‡±à‡∞°‡±ç ‡∞¨‡±Å‡∞ï‡±ç\n/settings - ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç\n/help - ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç'
        };

        const keyboard = {
            keyboard: [
                ['üöó Book Ride'],
                ['‚öôÔ∏è Settings', '‚ùì Help']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            selective: true
        };

        return this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
    }

    public async startBookingFlow(chatId: number, language: string) {
        const user = await User.findOne({ telegramId: chatId.toString() });
        console.log(user, chatId, language);
        if (!user?.district) {
            return this.startDistrictSelection(chatId, language, true);
        }
        if(!user?.town) {
            return this.startDistrictSelection(chatId, language, true);
        }
        return this.startZoneSelection(chatId, language);
    }

    public async startLocationUpdate(chatId: number, language: string) {
        return this.startDistrictSelection(chatId, language, false);
    }

    public async startDistrictSelection(chatId: number, language: string, isBooking = false) {
        const locations = await Location.find({}).distinct('district');
        const keyboard = {
            inline_keyboard: locations.map(district => [{
                text: district,
                callback_data: `${isBooking ? 'booking_' : ''}district_${district}`
            }])
        };
        return this.sendMessage(chatId, 'Select district:', keyboard);
    }

    private async startZoneSelection(chatId: number, language: string): Promise<any> {
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user?.district || !user?.town) return;

        const location = await Location.findOne<LocationData>({ 
            district: user.district, 
            town: user.town 
        });
        
        if (!location?.zones.length) return;

        const keyboard = {
            inline_keyboard: location.zones.map(zone => [{
                text: zone,
                callback_data: `zone_${zone}`
            }])
        };

        return this.sendMessage(
            chatId, 
            `District: ${user.district}\nTown: ${user.town}\nSelect zone for pickup:`, 
            keyboard
        );
    }

    async handleDistrictSelection(chatId: number, district: string, language: string, messageId?: number, isBooking = false): Promise<any> {
        try {
            const towns = await Location.find({ district }).distinct('town');
            await User.findOneAndUpdate(
                { telegramId: chatId.toString() },
                { district },
                { new: true }
            );
            
            const keyboard = {
                inline_keyboard: towns.map(town => [{
                    text: town,
                    callback_data: `town_${district}_${town}`
                }])
            };
            
            const messages = {
                en: `Selected District: ${district}\nNow select your town:`,
                hi: `‡§ö‡§Ø‡§®‡§ø‡§§ ‡§ú‡§ø‡§≤‡§æ: ${district}\n‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ ‡§∂‡§π‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç:`,
                te: `‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞® ‡∞ú‡∞ø‡∞≤‡±ç‡∞≤‡∞æ: ${district}\n‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±Ä ‡∞™‡∞ü‡±ç‡∞ü‡∞£‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:`
            };
            
            if (messageId) {
                return this.editMessage(
                    chatId,
                    messageId,
                    messages[language as keyof typeof messages],
                    keyboard
                );
            }
            return this.sendMessage(
                chatId, 
                messages[language as keyof typeof messages],
                keyboard
            );
        } catch (error) {
            console.error('District selection error:', error);
            throw error;
        }
    }

    async handleTownSelection(chatId: number, district: string, town: string, language: string, messageId?: number): Promise<any> {
        try {
            const user = await User.findOneAndUpdate(
                { telegramId: chatId.toString() },
                { town },
                { new: true }
            );

            if (!user) return;

            const messages = {
                en: `District set to: ${district}\nTown set to: ${town}`,
                hi: `‡§ú‡§ø‡§≤‡§æ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ: ${district}\n‡§∂‡§π‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ: ${town}`,
                te: `‡∞ú‡∞ø‡∞≤‡±ç‡∞≤‡∞æ ‡∞∏‡±Ü‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø: ${district}\n‡∞ü‡±å‡∞®‡±ç ‡∞∏‡±Ü‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø: ${town}`
            };

            const keyboard = user.role === 'DRIVER' ? {
                inline_keyboard: [
                    [{ text: 'üìç Update Zone', callback_data: 'update_zone' }],
                    [{ text: '‚öôÔ∏è Settings', callback_data: 'open_settings' }]
                ]
            } : {
                inline_keyboard: [
                    [{ text: 'üöó Book Now', callback_data: 'start_booking' }],
                    [{ text: '‚öôÔ∏è Settings', callback_data: 'open_settings' }]
                ]
            };

            if (messageId) {
                return this.editMessage(chatId, messageId, messages[language as keyof typeof messages], keyboard);
            }

            return this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
        } catch (error) {
            throw error;
        }
    }

    async handleZoneSelection(chatId: number, zone: string, language: string, messageId?: number): Promise<any> {
        const messages = {
            en: `Zone set to: ${zone}\n\nPlease enter your pickup address:`,
            hi: `‡§ú‡§º‡•ã‡§® ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ: ${zone}\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡§ø‡§ï‡§Ö‡§™ ‡§™‡§§‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:`,
            te: `‡∞ú‡±ã‡∞®‡±ç ‡∞∏‡±Ü‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø: ${zone}\n\n‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡∞ø‡∞ï‡∞™‡±ç ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø:`
        };

        const keyboard = {
            reply_markup: {
                force_reply: true,
                input_field_placeholder: 'Enter pickup address...',
                selective: true
            }
        };

        await User.findOneAndUpdate(
            { telegramId: chatId.toString() },
            { awaitingPickupAddress: true, currentZone: zone },
            { new: true }
        );
        
        return messageId ? 
            this.editMessage(chatId, messageId, messages[language as keyof typeof messages], keyboard) :
            this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
    }

    async handlePickupAddress(chatId: number, address: string, language: string) {
        try {
            const user = await User.findOne({ telegramId: chatId.toString() });
            if (!user?.district || !user?.town || !user?.currentZone) {
                return this.sendMessage(chatId, 'Please select your zone first');
            }

            const ride = await Ride.create({
                userId: chatId.toString(),
                district: user.district,
                town: user.town,
                zone: user.currentZone,
                pickupAddress: address,
                status: 'REQUESTED'
            });

            await User.findOneAndUpdate(
                { telegramId: chatId.toString() },
                { awaitingPickupAddress: false }
            );

            const messages = {
                en: 'Searching for drivers in your zone...',
                hi: '‡§Ü‡§™‡§ï‡•á ‡§ú‡§º‡•ã‡§® ‡§Æ‡•á‡§Ç ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
                te: '‡∞Æ‡±Ä ‡∞ú‡±ã‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞°‡±ç‡∞∞‡±à‡∞µ‡∞∞‡±ç‡∞≤‡∞®‡±Å ‡∞µ‡±Ü‡∞§‡±Å‡∞ï‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å...'
            };

            const keyboard = {
                inline_keyboard: [
                    [{ text: '‚ùå Cancel Booking', callback_data: 'cancel_booking' }]
                ]
            };

            await this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
            await this.notifyNearbyDrivers(ride);
            return ride;
        } catch (error) {
            console.error('Ride request error:', error);
            throw error;
        }
    }

    private async notifyNearbyDrivers(ride: IRide) {
        console.log('Notifying drivers for ride:', ride);
        const availableDrivers = await User.find({
            role: 'DRIVER',
            // district: ride.district,
            // town: ride.town,
            // zone: ride.zone,
            // isOnline: true,
        });

        console.log('Available drivers:', availableDrivers);

        if (!availableDrivers.length) {
            const busyDrivers = await User.find({
                role: 'DRIVER',
                district: ride.district,
                town: ride.town,
                zone: ride.zone,
                isOnline: true
            }).limit(3);
            console.log('Busy drivers:', busyDrivers);

            if (busyDrivers.length) {
                await this.sendMessage(
                    parseInt(ride.userId),
                    'All drivers are currently busy. Please wait or try again in a few minutes.'
                );
                for (const driver of busyDrivers) {
                    await this.sendMessage(
                        parseInt(driver.telegramId),
                        `New pending ride in your zone: ${ride.pickupAddress}`
                    );
                }
                return;
            }

            await this.sendMessage(
                parseInt(ride.userId),
                'No drivers available in your zone currently. Please try again later.'
            );
            return;
        }

        const keyboard = {
            inline_keyboard: [[
                { text: '‚úÖ Accept Ride', callback_data: `accept_ride_${ride._id}` }
            ]]
        };

        for (const driver of availableDrivers) {
            await this.sendMessage(
                parseInt(driver.telegramId),
                `New ride request in your zone!\nPickup: ${ride.pickupAddress}`,
                keyboard
            );
        }
    }

    async handleRideAcceptance(driverId: number | string, rideId: string, language: string) {
        const ride = await Ride.findByIdAndUpdate(rideId, {
            driverId: driverId.toString(),
            status: 'ACCEPTED',
            acceptTime: new Date()
        }, { new: true });

        if (!ride) return;

        const messages = {
            en: 'Driver is on the way!',
            hi: '‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞ ‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§π‡•à!',
            te: '‡∞°‡±ç‡∞∞‡±à‡∞µ‡∞∞‡±ç ‡∞¶‡∞æ‡∞∞‡∞ø‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å!'
        };

        await this.sendMessage(
            parseInt(ride.userId),
            messages[language as keyof typeof messages]
        );
    }

    private async showDriverStats(chatId: number, language: string) {
        const driver = await User.findOne({ telegramId: chatId.toString(), role: 'DRIVER' });
        if (!driver) return;

        const completedRides = await Ride.countDocuments({ 
            driverId: chatId.toString(),
            status: 'COMPLETED'
        });

        const messages = {
            en: `üìä Your Stats:\nRating: ‚≠ê${driver.rating?.toFixed(1) || 5.0}\nTotal Rides: ${completedRides}\nStatus: ${driver.isOnline ? 'üü¢ Online' : 'üî¥ Offline'}\nCurrent Zone: ${driver.currentZone || 'Not set'}`,
            hi: `üìä ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®:\n‡§∞‡•á‡§ü‡§ø‡§Ç‡§ó: ‚≠ê${driver.rating?.toFixed(1) || 5.0}\n‡§ï‡•Å‡§≤ ‡§∏‡§µ‡§æ‡§∞‡§ø‡§Ø‡§æ‡§Ç: ${completedRides}\n‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ${driver.isOnline ? 'üü¢ ‡§ë‡§®‡§≤‡§æ‡§á‡§®' : 'üî¥ ‡§ë‡§´‡§≤‡§æ‡§á‡§®'}\n‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: ${driver.currentZone || 'Not set'}`,
            te: `üìä ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø:\n‡∞∞‡±á‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç: ‚≠ê${driver.rating?.toFixed(1) || 5.0}\n‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞∞‡±à‡∞°‡±ç‡∞≤‡±Å: ${completedRides}\n‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø: ${driver.isOnline ? 'üü¢ ‡∞Ü‡∞®‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç' : 'üî¥ ‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç'}\n‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞ú‡±ã‡∞®‡±ç: ${driver.currentZone || 'Not set'}`
        };

        return this.sendMessage(chatId, messages[language as keyof typeof messages]);
    }

    private async toggleDriverStatus(chatId: number, language: string) {
        const driver = await User.findOne({ telegramId: chatId.toString(), role: 'DRIVER' });
        if (!driver) return;

        driver.isOnline = !driver.isOnline;
        await driver.save();

        const messages = {
            en: `You are now ${driver.isOnline ? 'üü¢ Online' : 'üî¥ Offline'}`,
            hi: `‡§Ü‡§™ ‡§Ö‡§¨ ${driver.isOnline ? 'üü¢ ‡§ë‡§®‡§≤‡§æ‡§á‡§®' : 'üî¥ ‡§ë‡§´‡§≤‡§æ‡§á‡§®'} ‡§π‡•à‡§Ç`,
            te: `‡∞Æ‡±Ä‡∞∞‡±Å ‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ${driver.isOnline ? 'üü¢ ‡∞Ü‡∞®‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç' : 'üî¥ ‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç'} ‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å`
        };

        const keyboard = {
            keyboard: [
                [driver.isOnline ? 'üî¥ Go Offline' : 'üö¶ Go Online'],
                ['üìç Update Zone', 'üìä My Stats'],
                ['‚öôÔ∏è Settings']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            selective: true
        };

        return this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
    }

    public async updateDriverZone(chatId: number, language: string): Promise<any> {
        const driver = await User.findOne({ telegramId: chatId.toString(), role: 'DRIVER' });
        if (!driver?.district || !driver?.town) return;

        const location = await Location.findOne<LocationData>({ 
            district: driver.district, 
            town: driver.town 
        });
        
        if (!location?.zones.length) return;

        const keyboard = {
            inline_keyboard: location.zones.map((zoneName: string) => [{
                text: zoneName,
                callback_data: `update_zone_${zoneName}`
            }])
        };

        const messages = {
            en: 'Select your current zone:',
            hi: '‡§Ö‡§™‡§®‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ú‡§º‡•ã‡§® ‡§ö‡•Å‡§®‡•á‡§Ç:',
            te: '‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞ú‡±ã‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:'
        };

        return this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
    }

    public async handleLanguageSettings(chatId: number, language: string, messageId?: number) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'English üá¨üáß', callback_data: 'lang_en' }],
                [{ text: '‡§π‡§ø‡§Ç‡§¶‡•Ä üáÆüá≥', callback_data: 'lang_hi' }],
                [{ text: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å üáÆüá≥', callback_data: 'lang_te' }],
                [{ text: '‚óÄÔ∏è Back', callback_data: 'back_to_settings' }]
            ]
        };

        const messages = {
            en: 'Choose your language:',
            hi: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:',
            te: '‡∞Æ‡±Ä ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:'
        };

        const text = messages[language as keyof typeof messages];
        return messageId ? 
            this.editMessage(chatId, messageId, text, keyboard) :
            this.sendMessage(chatId, text, keyboard);
    }

    public async handleProfileSettings(chatId: number, language: string, messageId?: number) {
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user) return;

        const messages = {
            en: `Profile:\nLanguage: ${language}\nDistrict: ${user.district || 'Not set'}\nTown: ${user.town || 'Not set'}\nZone: ${user.currentZone || 'Not set'}`,
            hi: `‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤:\n‡§≠‡§æ‡§∑‡§æ: ${language}\n‡§ú‡§ø‡§≤‡§æ: ${user.district || 'Not set'}\n‡§∂‡§π‡§∞: ${user.town || 'Not set'}\n‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: ${user.currentZone || 'Not set'}`,
            te: `‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç:\n‡∞≠‡∞æ‡∞∑: ${language}\n‡∞ú‡∞ø‡∞≤‡±ç‡∞≤‡∞æ: ${user.district || 'Not set'}\n‡∞ü‡±å‡∞®‡±ç: ${user.town || 'Not set'}\n‡∞ú‡±ã‡∞®‡±ç: ${user.currentZone || 'Not set'}`
        };

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîÑ Update Location', callback_data: 'profile_update_location' }],
                [{ text: '‚óÄÔ∏è Back', callback_data: 'back_to_settings' }]
            ]
        };

        const text = messages[language as keyof typeof messages];
        return messageId ? 
            this.editMessage(chatId, messageId, text, keyboard) :
            this.sendMessage(chatId, text, keyboard);
    }

    public async handleNotificationSettings(chatId: number, language: string, messageId?: number) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîî All', callback_data: 'notif_all' }],
                [{ text: 'üîï Important Only', callback_data: 'notif_important' }],
                [{ text: 'üö´ None', callback_data: 'notif_none' }],
                [{ text: '‚óÄÔ∏è Back', callback_data: 'back_to_settings' }]
            ]
        };

        const messages = {
            en: 'Choose notification settings:',
            hi: '‡§∏‡•Ç‡§ö‡§®‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ö‡•Å‡§®‡•á‡§Ç:',
            te: '‡∞®‡±ã‡∞ü‡∞ø‡∞´‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:'
        };

        const text = messages[language as keyof typeof messages];
        return messageId ? 
            this.editMessage(chatId, messageId, text, keyboard) :
            this.sendMessage(chatId, text, keyboard);
    }

    public async handleLanguageUpdate(chatId: number, messageId: number, langCode: string) {
        const messages = {
            en: 'üåê Language set to English',
            hi: 'üåê ‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à',
            te: 'üåê ‡∞≠‡∞æ‡∞∑ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞ï‡∞ø ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø'
        };

        await User.findOneAndUpdate(
            { telegramId: chatId.toString() },
            { preferredLanguage: langCode }
        );

        return this.editMessage(
            chatId, 
            messageId, 
            messages[langCode as keyof typeof messages]
        );
    }

    public async editMessage(chatId: number, messageId: number, text: string, keyboard?: any) {
        const payload: any = {
            chat_id: chatId,
            message_id: messageId,
            text,
            parse_mode: 'HTML'
        };

        if (keyboard) {
            payload.reply_markup = keyboard;
        }

        const response = await fetch(`${this.apiUrl}/editMessageText`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const resultText = await response.text();

        if (!response.ok) {
            console.error('Error editing message:', resultText);
            throw new Error(`Failed to edit message: ${resultText}`);
        }

        const result = JSON.parse(resultText);
        console.log('Edited message:', result);
        return result;
    }

    public async handleProfileUpdate(chatId: number, zone: string, language: string) {
        try {
            await User.findOneAndUpdate(
                { telegramId: chatId.toString() },
                { currentZone: zone },
                { new: true }
            );

            const messages = {
                en: '‚úÖ Your location has been updated successfully!',
                hi: '‚úÖ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!',
                te: '‚úÖ ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!'
            };

            return this.sendMessage(chatId, messages[language as keyof typeof messages]);
        } catch (error) {
            console.error('Profile update error:', error);
            throw error;
        }
    }

    public async sendSettings(chatId: number, language: string, messageId?: number) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'Change Language üåê', callback_data: 'settings_language' }],
                [{ text: 'Notifications üîî', callback_data: 'settings_notifications' }],
                [{ text: 'Profile üë§', callback_data: 'settings_profile' }]
            ]
        };

        const messages = {
            en: 'Settings:\nChoose what you want to change:',
            hi: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏:\n‡§ö‡•Å‡§®‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§¶‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç:',
            te: '‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç:\n‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±ã ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:'
        };

        const text = messages[language as keyof typeof messages];
        return messageId ? 
            this.editMessage(chatId, messageId, text, keyboard) :
            this.sendMessage(chatId, text, keyboard);
    }

    private getWelcomeMessage(language: string): string {
        const messages = {
            en: 'Welcome! You have been successfully registered. Please select your district.',
            hi: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ü‡§™‡§ï‡§æ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§´‡§≤ ‡§∞‡§π‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ú‡§ø‡§≤‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§',
            te: '‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç! ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞∞‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞ú‡∞ø‡∞≤‡±ç‡∞≤‡∞æ‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.'
        };
        return messages[language as keyof typeof messages] || messages.en;
    }

    private async sendDefaultResponse(chatId: number, language: string) {
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user) return;

        const messages = {
            en: "I don't understand that command. Use the menu buttons below.",
            hi: "‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù‡§§‡§æ‡•§ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§Æ‡•á‡§®‡•Ç ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
            te: "‡∞à ‡∞Ü‡∞¶‡±á‡∞∂‡∞Ç ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞ï‡∞æ‡∞≤‡±á‡∞¶‡±Å. ‡∞¶‡∞ø‡∞ó‡±Å‡∞µ‡∞® ‡∞â‡∞®‡±ç‡∞® ‡∞Æ‡±Ü‡∞®‡±Ç ‡∞¨‡∞ü‡∞®‡±ç‡∞≤‡∞®‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
        };
        
        const keyboard = user.role === 'DRIVER' ? {
            keyboard: [
                ['üö¶ Go Online', 'üî¥ Go Offline'],
                ['üìç Update Zone', 'üìä My Stats'],
                ['‚öôÔ∏è Settings']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            selective: true
        } : {
            keyboard: [
                ['üöó Book Ride', '‚öôÔ∏è Settings'],
                ['‚ùì Help']
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
            selective: true
        };

        return this.sendMessage(chatId, messages[language as keyof typeof messages], keyboard);
    }

    public async handleSettings(chatId: number, setting: string, language: string, messageId?: number) {
        const actions: Record<string, () => Promise<any>> = {
            'settings_language': () => this.handleLanguageSettings(chatId, language, messageId),
            'settings_profile': () => this.handleProfileSettings(chatId, language, messageId),
            'settings_notifications': () => this.handleNotificationSettings(chatId, language, messageId)
        };

        const action = setting.split('_')[1]; 
        return actions[`settings_${action}`]?.() || this.sendDefaultResponse(chatId, language);
    }

    public async deleteMessage(chatId: number, messageId?: number) {
        if (!messageId) return;
        
        const response = await fetch(`${this.apiUrl}/deleteMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: chatId,
                message_id: messageId
            })
        });
        return response.json();
    }
}
